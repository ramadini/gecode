#include <gecode/string.hh>
#include <gecode/driver.hh>
#include <math.h>

using namespace Gecode;
using namespace String;

string

int N = 30;
bool LEX = 1;

class StringOptions : public Options {

public:

  StringOptions(const char* s): Options(s) {
      //this->c_d(1);
  }

};

/*
* Determine N distinct substrings w_1, ..., w_N of W such that each w_i is
* palindrome and |w_i| > 1 for each i in {1, ..., k}.
*/
class LexPalindrome : public Script {

  StringVarArray string_vars;
  IntVarArray int_vars;

public:


  LexPalindrome(LexPalindrome& s): Script(s) {
    string_vars.update(*this, s.string_vars);
    int_vars.update(*this, s.int_vars);
  }
  virtual Space* copy() {
    return new LexPalindrome(*this);
  }

  LexPalindrome(const StringOptions& so): Script(so) {
    // Variables.
    IntVarArgs iva;
    StringVarArgs sva;
    int l = W.size(), n = l - 2 * (N - 1);
    StringVar w(*this, W);
    IntVar zero(*this, 0, 0);
    for (int i = 0; i < N; ++i) {
      StringVar wi(*this, 2, n);
      IntVar k(*this, 1, l - 1);
      sva << wi;
      iva << k;
      find(*this, wi, w, k);
      rel(*this, wi, STRT_REV, wi);
      if (i > 0) {
        if (LEX)
          rel(*this, sva[i - 1], STRT_LEXLT, wi);
        else
          for (int j = i; j > 0; --j)
            rel(*this, sva[j - 1], STRT_NQ, wi);
      }
    }
    int_vars = IntVarArray(*this, iva);
    string_vars = StringVarArray(*this, sva);
    sizemin_llul(*this, sva);
  }

  virtual void
  print(std::ostream& os) const {
  for (auto& w : string_vars)
    os << w << "\n";
  N = -1;
  }

};

int main() {
  StringOptions opt("*** Lex palindrome ***");
  opt.solutions(1);
  Script::run<LexPalindrome, DFS, StringOptions>(opt);
  assert (N == -1);
  return 0;
}
